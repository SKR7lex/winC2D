<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Msg.ScanSoftwareFailedFmt" xml:space="preserve">
    <value>Failed to scan software: {0}</value>
  </data>
  <data name="Title.Tip" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="Title.Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Msg.MigrateFailedFmt" xml:space="preserve">
    <value>Migration failed: {0}
{1}</value>
  </data>
  <data name="Msg.MigrateCompleted" xml:space="preserve">
    <value>Migration complete! Success: {0}, Fail: {1}</value>
  </data>
  <data name="Msg.SelectSoftware" xml:space="preserve">
    <value>Please select software to migrate.</value>
  </data>
  <data name="Desc.TargetFolderForSoftware" xml:space="preserve">
    <value>Select target folder (e.g., D:\Program Files)</value>
  </data>
  <data name="Title.MainWindow" xml:space="preserve">
    <value>winC2D</value>
  </data>
  <data name="Menu.Log" xml:space="preserve">
    <value>Migration Log</value>
  </data>
  <data name="Menu.Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Tab.SoftwareMigration" xml:space="preserve">
    <value>Software Migration</value>
  </data>
  <data name="Tab.AppData" xml:space="preserve">
    <value>AppData</value>
  </data>
  <data name="Msg.SelectAppData" xml:space="preserve">
    <value>Please select AppData folders to migrate.</value>
  </data>
  <data name="Desc.TargetFolderForAppData" xml:space="preserve">
    <value>Select target folder (using mklink symbolic link)</value>
  </data>
  <data name="Msg.MklinkNote" xml:space="preserve">
    <value>ℹ Note: This operation uses mklink to create symbolic links.</value>
  </data>
  <data name="Button.RefreshAppData" xml:space="preserve">
    <value>Refresh List</value>
  </data>
  <data name="Settings.Title" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Settings.ProgramFilesPath" xml:space="preserve">
    <value>Default Program Files Location (64-bit):</value>
  </data>
  <data name="Settings.ProgramFilesPathX86" xml:space="preserve">
    <value>Default Program Files Location (32-bit):</value>
  </data>
  <data name="Settings.CustomX86Path" xml:space="preserve">
    <value>Customize 32-bit program path</value>
  </data>
  <data name="Button.Browse" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="Button.Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="Button.Reset" xml:space="preserve">
    <value>Reset to Default</value>
  </data>
  <data name="Msg.InvalidPath" xml:space="preserve">
    <value>Please enter a valid folder path.</value>
  </data>
  <data name="Msg.SettingsApplied" xml:space="preserve">
    <value>Settings applied successfully!</value>
  </data>
  <data name="Msg.SettingsFailed" xml:space="preserve">
    <value>Failed to apply settings: {0}</value>
  </data>
  <data name="Msg.SelectFolder" xml:space="preserve">
    <value>Select the default Program Files location</value>
  </data>
  <data name="Msg.ResetConfirm" xml:space="preserve">
    <value>Are you sure you want to reset to the default location (C:\Program Files)?</value>
  </data>
  <data name="Settings.ProgramFilesSection" xml:space="preserve">
    <value>Program Files Location (Traditional Desktop Programs)</value>
  </data>
  <data name="Settings.ProgramFilesNote" xml:space="preserve">
    <value>ℹ This setting affects traditional desktop programs installed via installers (.exe, .msi). Most third-party software uses this location.</value>
  </data>
  <data name="Settings.StoragePolicySection" xml:space="preserve">
    <value>New Content Save Location (Microsoft Store Apps and User Content)</value>
  </data>
  <data name="Settings.StoragePolicyNote" xml:space="preserve">
    <value>ℹ This setting affects Microsoft Store apps and new user content (documents, photos, etc.). Requires Windows 10 or later.</value>
  </data>
  <data name="Button.OpenWindowsStorage" xml:space="preserve">
    <value>Open Windows Settings</value>
  </data>
  <data name="GroupBox.SystemSettings" xml:space="preserve">
    <value>System Settings</value>
  </data>
  <data name="Log.Title" xml:space="preserve">
    <value>Migration Log</value>
  </data>
  <data name="Log.Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Log.SoftwareName" xml:space="preserve">
    <value>Software Name</value>
  </data>
  <data name="Log.OldPath" xml:space="preserve">
    <value>Old Path</value>
  </data>
  <data name="Log.NewPath" xml:space="preserve">
    <value>New Path</value>
  </data>
  <data name="Log.Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Log.Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="Button.Rollback" xml:space="preserve">
    <value>Rollback Selected</value>
  </data>
  <data name="Msg.SelectLogEntry" xml:space="preserve">
    <value>Please select a migration log entry to rollback.</value>
  </data>
  <data name="Msg.NewPathNotExist" xml:space="preserve">
    <value>The new path does not exist, cannot rollback.</value>
  </data>
  <data name="Msg.OldPathExists" xml:space="preserve">
    <value>The old path already exists, cannot rollback.</value>
  </data>
  <data name="Msg.RollbackSuccess" xml:space="preserve">
    <value>Rollback successful!</value>
  </data>
  <data name="Msg.RollbackFailedFmt" xml:space="preserve">
    <value>Rollback failed: {0}</value>
  </data>
  <data name="Msg.Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="Column.SoftwareName" xml:space="preserve">
    <value>Software Name</value>
  </data>
  <data name="Column.InstallPath" xml:space="preserve">
    <value>Install Path</value>
  </data>
  <data name="Column.Size" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="Button.MigrateSelected" xml:space="preserve">
    <value>Migrate Selected</value>
  </data>
</root>